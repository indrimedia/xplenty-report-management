<?php

namespace AppBundle\Repository\Reporting;
use AppBundle\Service\RedshiftService;
use Symfony\Component\Yaml\Parser;
use AppBundle\Service\AWSService;

/**
 * BaseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseRepository
{

    /**
     * BaseRepository constructor.
     */
    public function __construct(){
        $this->retrieveSettings();
        $this->initializeExternalServices();
    }

    /**
     * Instantiate external services
     */
    public function initializeExternalServices(){
        //$this->AWS = new AWSService($this->settings['aws']);
        $this->redshiftService = new RedshiftService($this->settings['redshift']);

    }

    /**
     * Find all entities
     * @return mixed
     */
    public function findAllEntities(){
        $rows = $this->simpleQuery($this->table, '*', '', '', $this->nameField, ' ASC');
        return $rows;
    }

    /**
     * Execute a custom query
     * @param $query
     * @return mixed
     */
    public function customQuery($query){
        return $this->redshiftService->doQuery($query);
    }


    /**
     * Executes a simple query
     * @param $table
     * @param string $fields
     * @param string $where
     * @param string $groupField
     * @param string $orderField
     * @param string $ordering
     * @return mixed
     */
    public function simpleQuery($table, $fields = '*', $where = "", $groupField = "", $orderField = "", $ordering = " ASC"){
        $sql = "SELECT " . $fields . " FROM " . $table;
        if($where != ""){
            $sql .= " WHERE " . $where;
        }
        if($groupField != ""){
            $sql .= " GROUP BY " . $groupField;
        }
        if($orderField != ""){
            $sql .= " ORDER BY " . $orderField . $ordering;
        }
        return $this->redshiftService->doQuery($sql);
    }

    /**
     * Finds by property
     * @param $table
     * @param string $fields
     * @param string $property
     * @param string $propertyValue
     * @param string $orderField
     * @param string $ordering
     * @param int $limit
     * @return mixed
     */
    public function findByProperty($table, $fields = "*", $property = "", $propertyValue = "", $orderField = "", $ordering = " ASC", $limit = 1){
        $sql = "SELECT " . $fields . " FROM " . $table;
        if($property != "" and $propertyValue != ""){
            $sql .= " WHERE " . $property . "='" . $propertyValue ."'";
        }
        if($orderField != ""){
            $sql .= " ORDER BY " . $orderField . $ordering;
        }
        $sql .= " LIMIT " . $limit;
        return $this->redshiftService->doQuery($sql);
    }

    /**
     * Finds by multiple properties
     * @param $table
     * @param string $fields
     * @param array $properties
     * @param array $values
     * @param string $orderField
     * @param string $ordering
     * @param int $limit
     * @return mixed
     */
    public function findByMultipleProperties($table, $fields = "*", $properties = array(), $values = array(), $orderField = "", $ordering = " ASC", $limit = 1){
        $sql = "SELECT " . $fields . " FROM " . $table;
        foreach($properties as $key=> $property){
            $items[] = " " . $property . "='" . $values[$key] . "' ";
        }
        if(isset($items) AND count($items) > 0){
            $sql .= " WHERE " . implode('AND', $items);
        }
        if($orderField != ""){
            $sql .= " ORDER BY " . $orderField . $ordering;
        }
        $sql .= " LIMIT " . $limit;
        $this->redshiftService->reset();
        return $this->redshiftService->doQuery($sql);
    }

    /**
     * Simple update operation
     * @param $table
     * @param $valuePairs
     * @param $whereField
     * @param $whereValue
     * @return mixed
     */
    public function updateSQL($table, $valuePairs, $whereField, $whereValue){
        foreach($valuePairs as $field => $value){
            $items[] = $field . "='" . $value . "' ";
        }
        $sql = "UPDATE " . $table . " SET " . implode(",",$items) . " WHERE " . $whereField . "='" . $whereValue . "'";
        $this->redshiftService->reset();
        return $this->redshiftService->exec($sql);
    }

    /**
     * Updates by multiple criteria
     * @param $table
     * @param $valuePairs
     * @param array $whereFields
     * @param array $whereValues
     * @return bool
     */
    public function updateSQLByMultipleCriteria($table, $valuePairs, $whereFields = array(), $whereValues = array()){
        foreach($valuePairs as $field => $value){
            $items[] = $field . "='" . $value . "' ";
        }
        foreach($whereFields as $wkey => $wvalue){
            $witems[] = $wvalue . "='" . $whereValues[$wkey] . "' ";
        }
        if(isset($witems) AND count($witems) > 0){
            $whereClause = " WHERE " . implode(' AND ', $witems);
        }else{
            return false;
        }
        $sql = "UPDATE " . $table . " SET " . implode(",",$items) . $whereClause;
        return $this->redshiftService->exec($sql);
    }

    /**
     * Insert query
     * @param $table
     * @param $fields
     * @param $values
     * @return mixed
     */
    public function insertSQL($table, $fields, $values){
        $sql = "INSERT INTO " . $table . " (" . $fields . ") VALUES (" . $values . ")";
        $this->redshiftService->reset();
        return $this->redshiftService->exec($sql);
    }

    /**
     * Retrieves settings from configuration file
     */
    public function retrieveSettings(){
        $yaml = new Parser();
        $this->settings = $yaml->parse(file_get_contents(__DIR__ .'/../../Configuration/arm.yml'));
        return;
    }

}
