<?php

namespace AppBundle\Repository\Reporting;

use AppBundle\Entity\Reporting\Customer;

/**
 * CustomerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerRepository extends BaseRepository
{
    public $table = "xp_customers";

    public $nameField = "customer_name";

    /**
     * Finds all customers
     * @return array|bool
     */
    public function findAllCustomers(){
        $customerArray = $this->findAllEntities();
        $customerObjects = $this->instantiateObjects($customerArray);
        return $customerObjects;
    }

    /**
     * Instantiate objects
     * @param $customerArray
     * @return array|bool
     */
    private function instantiateObjects($customerArray){
        if(is_array($customerArray)) {
            foreach ($customerArray as $item) {
                $customers[] = $this->createCustomerObject($item);
            }
            return $customers;
        }
        return false;
    }

    /**
     * Find by customer ID
     * @param $id
     * @return Customer
     */
    public function findByCustomerID($id){
        $customerArray = $this->findByProperty($this->table, '*', 'customer_id', $id);
        return $this->createCustomerObject($customerArray[0]);
    }

    /**
     * Update customer
     * @param $customer
     */
    public function update($customer){
        $item['customer_id'] = $customer->getCustomerID();
        $item['customer_name'] = $customer->getCustomerName();
        $item['external_customer_code'] = $customer->getExternalCustomerCode();
        $item['external_customer_name'] = $customer->getExternalCustomerName();
        $this->updateSQL($this->table, $item, 'customer_id', $customer->getCustomerID());
        return;
    }

    /**
     * Create customer
     * @param $customer
     */
    public function create($customer){
        $fields = 'customer_id, customer_name, external_customer_code, external_customer_name';
        $values = "'" . $customer->getCustomerID() . "','" . $customer->getCustomerName() . "','" .
            $customer->getExternalCustomerCode() . "','" . $customer->getExternalCustomerName() ."'";
        $this->insertSQL($this->table, $fields, $values);
        return;
    }

    /**
     * Create a customer object as Doctrine doesn't work with Redshift because of keys
     * @param $item
     * @return Customer
     */
    public function createCustomerObject($item){
        $customer = new Customer();
        if(isset($item['customer_id'])) {
            $customer->setCustomerID($item['customer_id']);
        }
        $customer->setCustomerName($item['customer_name']);
        $customer->setExternalCustomerCode($item['external_customer_code']);
        $customer->setExternalCustomerName($item['external_customer_name']);

        return $customer;
    }
}
